sonata_user:
    impersonating:
        route: sonata_admin_dashboard
    manager_type: mongodb # can be orm or mongodb
    class:                  # Entity Classes
        user:               Biopen\CoreBundle\Document\User
        group:              Application\Sonata\UserBundle\Document\Group

    admin:                  # Admin Classes
        user:
            class:          Biopen\CoreBundle\Admin\UserAdmin
            controller:     BiopenCoreBundle:UserAdmin
            translation:    SonataUserBundle

        group:
            class:          Sonata\UserBundle\Admin\Document\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

fos_user:
    db_driver:      mongodb # can be orm or mongodb
    firewall_name:  main
    user_class:     Biopen\CoreBundle\Document\User
    registration:
        form:
            type: biopen_user_registration
        confirmation:
            enabled: true

    from_email:
        address:        "%mailer_user%"
        sender_name:    "%instance_name%"

    group:
        group_class:   Application\Sonata\UserBundle\Document\Group
        group_manager: sonata.user.mongodb.group_manager                    # If you're using doctrine orm (use sonata.user.mongodb.group_manager for mongodb)

    service:
        mailer: fos_user.mailer.twig_swift
        user_manager: sonata.user.mongodb.user_manager                      # If you're using doctrine orm (use sonata.user.mongodb.user_manager for mongodb)

hwi_oauth:
    # list of names of the firewalls in which this bundle is active, this setting MUST be set
    firewall_names: [main]
    target_path_parameter: _destination
    use_referer: true
    fosub:
        username_iterations: 30
        properties:
            google: gplusUid
            facebook : facebookUid
            communs: twitterUid
    resource_owners:
        gplus:
            type:                google
            client_id:           "%oauth_google_id%"
            client_secret:       "%oauth_google_secret%"
            scope:               "email profile"
            options:
                display: popup #dialog is optimized for popup window
                csrf: true
        facebook:
            type:                facebook
            client_id:           "%oauth_facebook_id%"
            client_secret:       "%oauth_facebook_secret%"
            scope:               "public_profile,email"
            options:
                display: popup #dialog is optimized for popup window
                auth_type: rerequest # Re-asking for Declined Permissions
        yahoo:
            type:                yahoo
            client_id:           dj0yJmk9VlJSaEY2MTZIODVCJmQ9WVdrOWJGRlhUMjVJTlRnbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD03Nw--
            client_secret:       babaa2b0eb6dc3d580f08f8ad298115409abae0c

        communs:
            type: oauth2
            paths:
                identifier: sub
                nickname: name
                realname: name
                firstname: given_name
                lastname: family_name
                email: email
            class:          'HWI\Bundle\OAuthBundle\OAuth\ResourceOwner\GenericOAuth2ResourceOwner'
            access_token_url: https://login.lescommuns.org/auth/realms/master/protocol/openid-connect/token
            authorization_url: https://login.lescommuns.org/auth/realms/master/protocol/openid-connect/auth
            infos_url:         https://login.lescommuns.org/auth/realms/master/protocol/openid-connect/userinfo
            client_id:      "%oauth_communs_id%"
            client_secret:  "%oauth_communs_secret%"
            scope:          "email profile openid"
