# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.version: 2.5.8
    use_as_sass: "%env(USE_AS_SAAS)%"
    locale: fr
    router.request_context.host: '%env(string:BASE_URL)%'
    router.request_context.base_url: '%env(BASE_PATH)%'
    from_email: "%env(FROM_EMAIL)"
    use_as_saas: '%env(USE_AS_SAAS)%'
    images_max_filesize: "%env(IMAGES_MAX_FILESIZE)%"
    files_max_filesize: "%env(FILES_MAX_FILESIZE)%"
    base_path: '%env(BASE_PATH)%'
    base_url: '%env(BASE_URL)%'
    instance_name: '%env(INSTANCE_NAME)%'
    contact_email: '%env(CONTACT_EMAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Services\MailService:
        arguments:
            $basePath: '%base_path%'
            $baseUrl: '%base_url%'
            $saas: '%use_as_saas%'
            $instanceName: '%instance_name%'
            $fromEmail: '%from_email%'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # imports:
    #     - { resource: "../src/Core/Resources/config/services.yml" }
    #     - { resource: "../src/Core/Resources/config/services_admin.yml" }
    #     - { resource: "../src/GeoDirectory/Resources/config/services.yml" }
    #     - { resource: "../src/GeoDirectory/Resources/config/services_admin.yml" }
    #     - { resource: "../src/Saas/Resources/config/services.yml" }
    #     - { resource: "../src/Saas/Resources/config/services_admin.yml" }
    #     - { resource: "../src/Sonata/UserBundle/Resources/config/services.yml" }

    gogo.authentication_handler:
      class: App\Application\Sonata\UserBundle\Security\AuthenticationHandler
      public: true
      arguments: [ '@router', '@session', "@security.token_storage"]

    gogo_user.gamification:
        class: App\Application\Sonata\UserBundle\Services\GamificationService
        public: true
        arguments: [ "@doctrine.odm.mongodb.document_manager" ]

    gogo_user.registration.form.type:
        class: App\Application\Sonata\UserBundle\Form\Type\RegistrationFormType
        public: true
        arguments: [ "%fos_user.model.user.class%" ]
        tags:
          - { name: "form.type", alias: "gogo_user_registration"}

    gogo.registration.form.handler:
      class: App\Application\Sonata\UserBundle\Form\Handler\RegistrationFormHandler
      public: true
      arguments:
        - "@request_stack"
        - "@fos_user.user_manager"
        - "@fos_user.mailer"
        - "@fos_user.util.token_generator"
        - "@bazinga_geocoder.geocoder"

    my_user_provider:
        class: App\Application\Sonata\UserBundle\Security\FOSUBUserProvider
        public: true
        arguments: ["@fos_user.user_manager",{facebook: facebookUid, gplus: gplusUid, communs: communsUid}]

    jms_serializer.naming_strategy_camelCase:
        public: true
        class: 'JMS\Serializer\Naming\IdenticalPropertyNamingStrategy'

    jms_serializer.naming_strategy:
        public: true
        class: 'JMS\Serializer\Naming\SerializedNameAnnotationStrategy'
        arguments : ['@jms_serializer.naming_strategy_camelCase']

    jms_serializer.expression_language:
        public: true
        class: 'Symfony\Component\ExpressionLanguage\ExpressionLanguage'

    jms_serializer.expression_evaluator:
        public: true
        class: 'JMS\Serializer\Expression\ExpressionEvaluator'
        arguments : ['@jms_serializer.expression_language']


    custom.sonata.security.handler.role:
        public: true
        class:  App\Application\Sonata\UserBundle\Security\CustomRoleSecurityHandler
        arguments:
            - "@security.authorization_checker"
            - [ROLE_SUPER_ADMIN]


    # # SONATA BLOCKS
    gogo.block.service.monitoring:
        class: App\Block\MonitoringElementsBlockService
        public: true
        arguments: [ "@twig", "@doctrine.odm.mongodb.document_manager" ]
        tags:
            - { name: sonata.block }

    gogo.block.service.charts:
        class: App\Block\ChartBlockService
        public: true
        arguments: [ "@twig", "@doctrine.odm.mongodb.document_manager", "App/Services/ConfigurationService" ]
        tags:
            - { name: sonata.block }

    gogo.block.recent_elements:
        class: App\Block\RecentElementsBlockService
        public: true
        arguments: [ "@twig", "@doctrine.odm.mongodb.document_manager", "@sonata.admin.pool" ]
        tags:
            - { name: sonata.block }